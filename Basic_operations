{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.1"
    },
    "colab": {
      "name": "Assignment #3 w/Sample Output.ipynb",
      "provenance": [],
      "collapsed_sections": [
        "c-NRukks8KYx",
        "tz0u3VUu8KYy",
        "FwEE169k8KY0",
        "dmQFk5Lt8KY1",
        "QJD3JGA68KY1",
        "9mz7jOHj8KY2",
        "kOkNER298KY3",
        "1My0K3-08KY5"
      ]
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "NgIbWbWy8KYv"
      },
      "source": [
        "from pymongo import MongoClient\n",
        "import pymongo\n",
        "from bson.objectid import ObjectId\n",
        "\n",
        "db_url=\"mongodb://mongodb:mongodb@cluster0-shard-00-00.wxx0a.mongodb.net:27017,cluster0-shard-00-01.wxx0a.mongodb.net:27017,cluster0-shard-00-02.wxx0a.mongodb.net:27017/test?ssl=true&replicaSet=atlas-p5zfhi-shard-0&authSource=admin&retryWrites=true&w=majority\"\n",
        "client = MongoClient(db_url)\n",
        "\n",
        "# See all databases: list(client.list_databases())\n",
        "airbnb=client['sample_airbnb']['listingsAndReviews']\n",
        "geospatial=client['sample_geospatial']['shipwrecks']\n",
        "netflix=client['sample_mflix']\n",
        "movies=client['sample_mflix']['movies']\n",
        "supplies=client['sample_supplies']['sales']\n",
        "training=client['sample_training']\n",
        "companies=client['sample_training']['companies']\n",
        "weather=client['sample_weatherdata']['data']\n",
        "grades = training['grades'] \n",
        "\n",
        "\n",
        "# OTHER NOTES --- \n",
        "# list dbs\n",
        "# list_databases()\n",
        "\n",
        "# list collections\n",
        "# list_collection_names()\n",
        "\n",
        "# SORT --> SKIP --> LIMIT\n",
        "# collection.distinct('address.country')\n",
        "# Query construction\n",
        "# collection.find() \n",
        "# collection.count_documents()\n"
      ],
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eRejLxDj8KYw"
      },
      "source": [
        "### All Query Operators discussed below can be found here:\n",
        "https://docs.mongodb.com/manual/reference/operator/query/"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "c-NRukks8KYx"
      },
      "source": [
        "## Problem 1\n",
        "\n",
        "Find a document in the movies collection where all the following are true:\n",
        "\n",
        "~~~\n",
        "1) \"genres\" is not in the following: \"Drama\",\"Fantasy\". Use the NOT operator.\n",
        "2) \"countries\" is in \"USA\",\"Spain\" OR \"languages\" is \"English\"\n",
        "3) \"imdb.rating\" is greater than 7 OR \"tomatoes.viewer.rating\" is greater than 4\n",
        "4) Limit to 1 result\n",
        "5) Sort by year descending and title descending\n",
        "6) Return the following fields: \"_id,\"genres\", \"countries\", \"languages\",\"imdb\", \"tommatoes\", \"title\"\n",
        "~~~"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JnfLOmfWDecX"
      },
      "source": [
        "**expected output**\n",
        "\n",
        "\n",
        "\n",
        "```\n",
        "[{'_id': ObjectId(),\n",
        "  'countries': ['country1','country2'...],\n",
        "  'genres': ['genre1','genre2'...],\n",
        "  'imdb': {'id': ..., 'rating': ..., 'votes': ...},\n",
        "  'languages': ['lang1','lang2'...],\n",
        "  'title': 'some title'}]\n",
        "```\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tz0u3VUu8KYy"
      },
      "source": [
        "## Problem 2 - double negative & \"is_past\" must exist\n",
        "\n",
        "Find a document in the companies collection where:\n",
        "\n",
        "~~~\n",
        "1) \"founded_year\" is in the following: 2006, 2008, 20012\n",
        "2) Where not any \"is_past\" field in the array of embedded objects \"relationships\" field is equal to False. Also the \"relationships.is_past\" field must exist.\n",
        "3) Return only the relevant fields in the query criteria - \"relationships\", \"founded_year\" and \"_id\".\n",
        "4) Limit to 1 result\n",
        "5) Sort on \"founded_year\" in ascending order\n",
        "~~~"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4D28Tlu2EF6Q"
      },
      "source": [
        "**expected output**\n",
        "\n",
        "\n",
        "\n",
        "```\n",
        "[{'_id': ObjectId(''),\n",
        "  'founded_year': 1999,\n",
        "  'relationships': [{'is_past': True,\n",
        "    'person': {'first_name': 'Tony',\n",
        "     'last_name': 'Stark',\n",
        "     'permalink': 'tony-stark'},\n",
        "    'title': 'title1'},\n",
        "   {'is_past': True,\n",
        "    'person': {'first_name': 'first2',\n",
        "     'last_name': 'last2',\n",
        "     'permalink': 'first-last'},\n",
        "    'title': 'title'}]}]\n",
        "```\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FwEE169k8KY0"
      },
      "source": [
        "## Problem 3\n",
        "\n",
        "Find documents in the airbnb where:\n",
        "~~~\n",
        "1) the “number_of_reviews” is greater than 100\n",
        "2) \"beds\" is greater than 5 OR \"review_scores.review_scores_rating\" is greater than 97\n",
        "3) \"host.host_is_superhost\" is set to True OR \"property_type\" is a Villa\n",
        "4) Limit to 1 result\n",
        "5) Sort on \"beds\" in descending order\n",
        "~~~"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gPNwnPRrGHdq"
      },
      "source": [
        "**expected output**\n",
        "\n",
        "\n",
        "```\n",
        "[{'_id': 'id1',\n",
        "  'beds': #,\n",
        "  'host': {'host_is_superhost': True},\n",
        "  'name': 'name1',\n",
        "  'number_of_reviews': #,\n",
        "  'property_type': 'value',\n",
        "  'review_scores': {'review_scores_rating': #}}]\n",
        "```\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dmQFk5Lt8KY1"
      },
      "source": [
        "## Problem 4\n",
        "\n",
        "Find documents in the training.grades collection where:\n",
        "~~~\n",
        "1) \"scores.score\" array of embedded documents has no value greater than 80\n",
        "2) Sort by \"class_id\" descending, student_id ascending\n",
        "~~~"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7VV7F73nHfLV"
      },
      "source": [
        "**expected output**\n",
        "\n",
        "\n",
        "```\n",
        "[{'_id': ObjectId(''),\n",
        "  'class_id': #,\n",
        "  'scores': [{'79': score1, 'type': 'type1'},\n",
        "   {'score': 50, 'type': 'type2'},\n",
        "   {'score': 60, 'type': 'type3'},\n",
        "   {'score': 20, 'type': 'type4'}],\n",
        "  'student_id': #}]\n",
        "```\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QJD3JGA68KY1"
      },
      "source": [
        "## Problem 5\n",
        "\n",
        "Return the count of all the documents where:\n",
        "~~~\n",
        "1) \"genres\" not in the following: \"Drama\",\"Fantasy\"\n",
        "~~~\n",
        "\n",
        "Write 2 different queries to return this count. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "L0jR4k7wH5WM"
      },
      "source": [
        "**expected output**\n",
        "\n",
        "\n",
        "```\n",
        "output1 = value\n",
        "output2 = value\n",
        "\n",
        "```\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9mz7jOHj8KY2"
      },
      "source": [
        "## Problem 6\n",
        "\n",
        "Return the documents from the airbnb collection where:\n",
        "~~~\n",
        "1) \"amenities\" field has values in: \"TV\", \"Wifi\"\n",
        "2) \"reviews\" exists and is not equal to []\n",
        "3) \"property_type\" is in one of the following values: \"Hostel\",\"Hotel\" OR \"room_type\" is in one of the following values \"Entire home/apt\",\"Private room\"\n",
        "4) The field in the array of embedded objects \"reviews.reviewer_name\" is not equal to \"Theo\" OR the \"reviews.reviewer_name\" field is not equal to \"Marie\" \n",
        "5) Only return the following \"_id\", \"amenities\", \"reviews.reviewer_name\",\"room_type\",\"property_type\", \"name\", \"accommodates\"\n",
        "6) Sort by name descending, accommodates descending\n",
        "7) Limit to 1 result\n",
        "~~~"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ei-_BUNmIdt_"
      },
      "source": [
        "**expected output**\n",
        "\n",
        "```\n",
        "[{'_id': '',\n",
        "  'accommodates': #,\n",
        "  'amenities': ['TV','value2','value3'],\n",
        "  'name': 'name1',\n",
        "  'property_type': 'property1',\n",
        "  'reviews': [{'reviewer_name': 'name1'}],\n",
        "  'room_type': 'room_value'}]\n",
        "```\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kOkNER298KY3"
      },
      "source": [
        "## Problem 7\n",
        "\n",
        "In the movies collection:\n",
        "\n",
        "~~~\n",
        "1) \"genres\" not equal to Documentary\n",
        "2) \"imdb.rating\" greater than 8\n",
        "3) \"tomatoes.viewer.rating\" greater than 4\n",
        "4) \"rated\" in one of the following values:\"APPROVED\",\"PG-13\",\"PG\" OR the \"year\" is in one of the following values:2000, 2008, 2010, 2012 OR \"runtime\" greater than 100\n",
        "5) Only return \"_id\",\"genres\", \"imdb.rating\", \"tomatoes.viewer.rating\", \"rated\",\"year\",\"runtime\"\n",
        "6) Limit to 1 result\n",
        "7) Sort by \"runtime\" ascending and \"year\" descending\n",
        "~~~"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LQPa3BR3JMOy"
      },
      "source": [
        "**expected output**\n",
        "\n",
        "```\n",
        "[{'_id': ObjectId(''),\n",
        "  'genres': ['genre1', 'genre2',..],\n",
        "  'imdb': {'rating': 9.4},\n",
        "  'rated': 'rated1',\n",
        "  'runtime': runtime1,\n",
        "  'tomatoes': {'viewer': {'rating': 5.3}},\n",
        "  'year': year1}]\n",
        "```\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9zWFTWD98KY5"
      },
      "source": [
        "## Problem 8\n",
        "\n",
        "Return the document from the companies collection where the following are true:\n",
        "~~~\n",
        "1) \"number_of_employees\" is greater than 10\n",
        "2) One object in the \"funding_rounds\" array has a \"funded_day\" field value of 1, a \"funded_month\" between 9 and 12, and a \"raised_amount\" of greater than or equal to 1000000\n",
        "3) One object in the \"investments\" array which is embedded in the \"funding_rounds\" array has a \"financial_org.name\" field value of \"Sequoia Capital\" and \"financial_org.permalink\" field value of \"sequoia-capital\"\n",
        "4) Return the \"number_of_employees\", \"name\", and \"funding_rounds\"\n",
        "5) Limit to 1 result\n",
        "6) Sort by name ascending and number_of_employees descending\n",
        "~~~"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "C2DX_6WyLn6v"
      },
      "source": [
        "**expected output**\n",
        "\n",
        "```\n",
        "[{'_id': ObjectId(''),\n",
        "  'funding_rounds': [{'funded_day': 1,\n",
        "    'funded_month': 12,\n",
        "    'funded_year': #,\n",
        "    'id': #,\n",
        "    'investments': [{'company': None,\n",
        "      'financial_org': {'name': 'Sequoia Capital',\n",
        "       'permalink': 'sequoia-capital'},\n",
        "      'person': {'first_name': 'name1',\n",
        "       'last_name': 'last1',\n",
        "       'permalink': 'first-last'}},...],\n",
        "    'raised_amount': 1000000\n",
        "     .....}],\n",
        "     'name': 'name1', \n",
        "     'number_of_employees': # \n",
        "```"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1My0K3-08KY5"
      },
      "source": [
        "## Problem 9\n",
        "\n",
        "Write and execute the following as a MongoDB query.\n",
        "~~~\n",
        "SELECT tomatoes.viewer.rating, awards.wins, imdb.rating, _id, title\n",
        "FROM movies\n",
        "WHERE awards.wins > 3 \n",
        "OR (imdb.rating BETWEEN 7.5 AND 9 AND tomatoes.viewer.rating > 3.5)\n",
        "ORDER BY title \n",
        "LIMIT 1\n",
        "~~~"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "y--2XSAfOjOe"
      },
      "source": [
        "**expected output**\n",
        "\n",
        "```\n",
        "[{'_id': ObjectId(''),\n",
        "  'awards': {'wins': #},\n",
        "  'imdb': {'rating': #},\n",
        "  'title': \"title1\",\n",
        "  'tomatoes': {'viewer': {'rating': #}}}]\n",
        "```"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QRj3y9Sf8KY6"
      },
      "source": [
        "## Problem 10\n",
        "\n",
        "Write and execute the following as a MongoDB query.\n",
        "\n",
        "~~~\n",
        "SELECT _id, genres, runtime, type\n",
        "FROM movies\n",
        "WHERE (genres=\"Short\" OR type=\"series\") AND runtime < 30\n",
        "ORDER BY runtime DESC \n",
        "LIMIT 1\n",
        "~~~"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "81zlw72jPXrf"
      },
      "source": [
        "**expected output**\n",
        "\n",
        "```\n",
        "[{'_id': ObjectId(''),\n",
        "  'genres': ['genre1', 'genre2'],\n",
        "  'runtime': 20,\n",
        "  'type': 'x'}]\n",
        "```"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wUtwRYYf8KY8"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OMreskIkTbmp"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}
