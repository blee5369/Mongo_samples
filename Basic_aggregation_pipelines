{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "vYNWnMEUPSk5"
   },
   "source": [
    "# MongoDB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "mBwMNMYZPSk_"
   },
   "outputs": [],
   "source": [
    "from pymongo import MongoClient\n",
    "import pymongo\n",
    "db_url=\"mongodb://mongodb:mongodb@cluster0-shard-00-00.wxx0a.mongodb.net:27017,cluster0-shard-00-01.wxx0a.mongodb.net:27017,cluster0-shard-00-02.wxx0a.mongodb.net:27017/test?ssl=true&replicaSet=atlas-p5zfhi-shard-0&authSource=admin&retryWrites=true&w=majority\"\n",
    "client = MongoClient(db_url)\n",
    "\n",
    "# See all databases: list(client.list_databases())\n",
    "airbnb=client['sample_airbnb']['listingsAndReviews']\n",
    "geospatial=client['sample_geospatial']['shipwrecks']\n",
    "netflix=client['sample_mflix']\n",
    "\n",
    "movies=client['sample_mflix']\n",
    "supplies=client['sample_supplies']['sales']\n",
    "training=client['sample_training']\n",
    "weather=client['sample_weatherdata']['data']\n",
    "grades = training['grades'] "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "TcquEBdAPSlA"
   },
   "source": [
    "### All Query Operators discussed below can be found here:\n",
    "https://docs.mongodb.com/manual/reference/operator/query/"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "kYJ0IjrxPSlA"
   },
   "source": [
    "## Question 1  \n",
    "\n",
    "Find the number of listings in the Airbnb collection with \"accomodates\" value of 5 i.e. that accomodates 5 people. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 1263,
     "status": "ok",
     "timestamp": 1611702787426,
     "user": {
      "displayName": "Arsames Qajar",
      "photoUrl": "",
      "userId": "07297027633013273984"
     },
     "user_tz": 480
    },
    "id": "gu3tjS8TPSlA",
    "outputId": "d7a87086-2d6c-463f-da3a-2bd1681d81d8"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "264"
      ]
     },
     "execution_count": 2,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "airbnb.count_documents({\"accommodates\": 5})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 650,
     "status": "ok",
     "timestamp": 1611702811054,
     "user": {
      "displayName": "Arsames Qajar",
      "photoUrl": "",
      "userId": "07297027633013273984"
     },
     "user_tz": 480
    },
    "id": "ZG1ZhcPmPSlB",
    "outputId": "1ffedf75-747a-4c06-9b82-1efed45d4b1f"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:1: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "264"
      ]
     },
     "execution_count": 3,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "airbnb.find({\"accommodates\": 5}).count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "OA7qPkGcPSlC"
   },
   "source": [
    "## Question 2 \n",
    "\n",
    "Find the number of documents in the Airbnb collection that have a \"TV\" as a value in the \"amenities\" array."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "vZVrwPbiPSlC",
    "outputId": "324e99a3-15d8-4476-d9bb-59b7c4618b9f"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4280"
      ]
     },
     "execution_count": 3,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "airbnb.count_documents({\"amenities\": \"TV\"})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 198
    },
    "executionInfo": {
     "elapsed": 478,
     "status": "error",
     "timestamp": 1611705353834,
     "user": {
      "displayName": "Arsames Qajar",
      "photoUrl": "",
      "userId": "07297027633013273984"
     },
     "user_tz": 480
    },
    "id": "HTzM7-pFPSlC",
    "outputId": "7fb9686e-24ee-4730-8030-f1b979023bfc"
   },
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "ignored",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-7-9844e11d263f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mairbnb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfind\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0;34m\"amenities\"\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m\"TV\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mairbnb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdistinct\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m: distinct() missing 1 required positional argument: 'key'"
     ]
    }
   ],
   "source": [
    "list(airbnb.find({\"amenities\": [\"TV\"]}))\n",
    "\n",
    "airbnb.distinct()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "EqcrsjFRPSlD"
   },
   "source": [
    "## Question 3\n",
    "\n",
    "Find all the listings with 10 bedrooms, sorted by name descending and ONLY return the name, bedrooms, amenities, and address field. Limit to 1 result.\n",
    "~~~\n",
    "SELECT name, bedrooms, address\n",
    "FROM airbnb\n",
    "WHERE bedrooms = 10\n",
    "ORDER BY name desc\n",
    "LIMIT 1\n",
    "~~~"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 503,
     "status": "ok",
     "timestamp": 1611704866122,
     "user": {
      "displayName": "Arsames Qajar",
      "photoUrl": "",
      "userId": "07297027633013273984"
     },
     "user_tz": 480
    },
    "id": "TzMnCnTzPSlD",
    "outputId": "66ec6314-69b7-439d-cb95-ac133971303a"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'address': {'country': 'Portugal',\n",
       "   'country_code': 'PT',\n",
       "   'government_area': 'Santa Marinha e SÃ£o Pedro da Afurada',\n",
       "   'location': {'coordinates': [-8.62181, 41.13354],\n",
       "    'is_location_exact': False,\n",
       "    'type': 'Point'},\n",
       "   'market': 'Porto',\n",
       "   'street': 'Vila Nova de Gaia, Porto, Portugal',\n",
       "   'suburb': ''},\n",
       "  'bedrooms': 10,\n",
       "  'name': 'Great Complex of the Cellars'}]"
      ]
     },
     "execution_count": 6,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(airbnb.find({'bedrooms': 10}, {\"_id\":0, \"name\":1, \"bedrooms\":1, \"address\":1}).sort(\"name\",-1).limit(1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Ag_bnBSgPSlD"
   },
   "source": [
    "## Question 4\n",
    "\n",
    "SELECT name, number_of_reviews  <br>\n",
    "FROM airbnb <br>\n",
    "ORDER BY number_of_reviews desc <br>\n",
    "LIMIT 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 433,
     "status": "ok",
     "timestamp": 1611723189497,
     "user": {
      "displayName": "Arsames Qajar",
      "photoUrl": "",
      "userId": "07297027633013273984"
     },
     "user_tz": 480
    },
    "id": "XCXXNVQpPSlE",
    "outputId": "3c2b803c-ecf9-4998-89d3-ef42758f0e31"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'address': {'country': 'United States',\n",
       "   'country_code': 'US',\n",
       "   'government_area': 'Primary Urban Center',\n",
       "   'location': {'coordinates': [-157.83386, 21.28741],\n",
       "    'is_location_exact': True,\n",
       "    'type': 'Point'},\n",
       "   'market': 'Oahu',\n",
       "   'street': 'Honolulu, HI, United States',\n",
       "   'suburb': 'Honolulu'},\n",
       "  'name': '#Private Studio - Waikiki Dream',\n",
       "  'number_of_reviews': 533}]"
      ]
     },
     "execution_count": 4,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(airbnb.find({},{\"_id\":0, \"name\":1, \"number_of_reviews\":1, \"address\":1}).sort(\"number_of_reviews\",-1).limit(1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "81ZU8OncPSlE"
   },
   "source": [
    "# Comparison Operators\n",
    "\n",
    "~~~\n",
    "$eq: Matches values that are equal to a specified value.\n",
    "$gt: Matches values that are greater than a specified value.\n",
    "$gte: Matches values that are greater than or equal to a specified value.\n",
    "$in: Matches any of the values specified in an array.\n",
    "$lt: Matches values that are less than a specified value.\n",
    "$lte: Matches values that are less than or equal to a specified value.\n",
    "$ne: Matches all values that are not equal to a specified value.\n",
    "$nin: Matches none of the values specified in an array.\n",
    "~~~\n",
    "\n",
    "See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more info."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "wueNlw-uXzty"
   },
   "source": [
    "WHEN to use $eq operator:\n",
    "\n",
    "\n",
    "1.   with $not logical operator \n",
    "2.   regex\n",
    "\n",
    "https://docs.mongodb.com/manual/reference/operator/query/eq/#eq-usage-examples"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "ZKgyaRZkPSlE"
   },
   "source": [
    "## Question 5 \n",
    "\n",
    "Return the document where \"accommodates\" is greater than 6, and ordered by \"number_of_reviews\" descending, limit to 1 result. Only return \"name\", \"accommodates\", \"number_of_reviews\", and the \"address\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 420,
     "status": "ok",
     "timestamp": 1611706327898,
     "user": {
      "displayName": "Arsames Qajar",
      "photoUrl": "",
      "userId": "07297027633013273984"
     },
     "user_tz": 480
    },
    "id": "Ti2LtoJ7PSlE",
    "outputId": "c7ede729-7dd7-4bea-e4c8-9e3842d687b4"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'accommodates': 11,\n",
       "  'address': {'country': 'Spain',\n",
       "   'country_code': 'ES',\n",
       "   'government_area': 'el Putxet i el FarrÃ³',\n",
       "   'location': {'coordinates': [2.1465, 41.40914],\n",
       "    'is_location_exact': False,\n",
       "    'type': 'Point'},\n",
       "   'market': 'Barcelona',\n",
       "   'street': 'Barcelona, Catalonia, Spain',\n",
       "   'suburb': 'SarriÃ -Sant Gervasi'},\n",
       "  'name': 'Spectacular Modern Uptown Duplex',\n",
       "  'number_of_reviews': 273}]"
      ]
     },
     "execution_count": 12,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(airbnb\n",
    "     .find({\"accommodates\": {\"$gt\":6}}, {\"_id\":0, \"name\":1, \"accommodates\":1, \"number_of_reviews\":1, \"address\":1})\n",
    "     .sort(\"number_of_reviews\",-1)\n",
    "     .limit(1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "lSElLKnEPSlF"
   },
   "source": [
    "## Question 6 - $nin\n",
    "\n",
    "Return the document where the \"accomoodates\" is greater than 3 and less than 6, and \"amenities\" value where that does not contain a \"TV\" nor \"Internet\" and \"number_of_reviews\" greater than or equal to 22. Only return the name, accomodates, amenities and number_of_reviews fields and sort by the number_of_reviews field descending. Limit to 1 result.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "D7Thx7GsPSlF",
    "outputId": "86189d51-3a15-4b73-d1e7-370f321b3a85"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'name': 'Lovely apartment with private parking',\n",
       "  'accommodates': 5,\n",
       "  'number_of_reviews': 204,\n",
       "  'amenities': ['Wifi',\n",
       "   'Kitchen',\n",
       "   'Free parking on premises',\n",
       "   'Buzzer/wireless intercom',\n",
       "   'Family/kid friendly',\n",
       "   'Washer',\n",
       "   'First aid kit',\n",
       "   'Fire extinguisher',\n",
       "   'Essentials',\n",
       "   'Shampoo',\n",
       "   '24-hour check-in',\n",
       "   'Hangers',\n",
       "   'Hair dryer',\n",
       "   'Iron',\n",
       "   'Laptop friendly workspace',\n",
       "   'translation missing: en.hosting_amenity_50',\n",
       "   'High chair',\n",
       "   'Hot water',\n",
       "   'Bed linens',\n",
       "   'Ethernet connection',\n",
       "   'Microwave',\n",
       "   'Coffee maker',\n",
       "   'Refrigerator',\n",
       "   'Dishes and silverware',\n",
       "   'Cooking basics',\n",
       "   'Oven',\n",
       "   'Stove',\n",
       "   'Patio or balcony',\n",
       "   'Luggage dropoff allowed',\n",
       "   'Long term stays allowed',\n",
       "   'Cleaning before checkout',\n",
       "   'Wide hallway clearance',\n",
       "   'Wide doorway',\n",
       "   'Flat path to front door',\n",
       "   'Well-lit path to entrance',\n",
       "   'Step-free access',\n",
       "   'Accessible-height bed',\n",
       "   'Step-free access',\n",
       "   'Accessible-height toilet',\n",
       "   'Host greets you']}]"
      ]
     },
     "execution_count": 22,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(airbnb\n",
    "     .find({\n",
    "         \"accommodates\": {\"$gt\":3, \"$lt\":6},\n",
    "         \"amenities\": {\"$nin\": [\"TV\",\"Internet\"]},\n",
    "         \"number_of_reviews\": {\"$gte\": 22}\n",
    "     },\n",
    "           {\"_id\":0, \"name\":1, \"accommodates\":1, \"amenities\":1,\"number_of_reviews\":1 })\n",
    "     .sort(\"number_of_reviews\",-1)\n",
    "     .limit(1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "4yx8pbGSPSlF"
   },
   "source": [
    "## Question 7 - Special Case $nin\n",
    "\n",
    "Return the count of documents that do not have any of the following cast members: \"GÃ¨rard Depardieu\", \"Robert De Niro\", \"Morgan Freeman\", \"Samuel L. Jackson\",\"Nicolas Cage\", nor \"Bruce Willis\". \n",
    "\n",
    "\n",
    "### Note \n",
    "the field value is not in the specified array or <br>\n",
    "the field does not exist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 486,
     "status": "ok",
     "timestamp": 1611709156367,
     "user": {
      "displayName": "Arsames Qajar",
      "photoUrl": "",
      "userId": "07297027633013273984"
     },
     "user_tz": 480
    },
    "id": "Oh9AifFCPSlG",
    "outputId": "29fbb749-f7ec-4877-f969-acbfdd70b613"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "23217"
      ]
     },
     "execution_count": 22,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "movies['movies'].count_documents({\"cast\": {\n",
    "    \"$nin\": [\"GÃ¨rard Depardieu\", \"Robert De Niro\", \"Morgan Freeman\",\n",
    "             \"Samuel L. Jackson\",\"Nicolas Cage\",\"Bruce Willis\"],\n",
    "}})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "6hrF1HFOPSlG"
   },
   "source": [
    "### Compare"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 635,
     "status": "ok",
     "timestamp": 1611709159581,
     "user": {
      "displayName": "Arsames Qajar",
      "photoUrl": "",
      "userId": "07297027633013273984"
     },
     "user_tz": 480
    },
    "id": "zf8im5jaPSlG",
    "outputId": "090a12bd-9e14-495e-cd45-066be184683b"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "23217 exists, 390 doesnt exist, and total 23530.\n"
     ]
    }
   ],
   "source": [
    "\n",
    "original = movies['movies'].count_documents({\"cast\": {\"$ne\":{\n",
    "    \"$in\": [\"GÃ¨rard Depardieu\", \"Robert De Niro\", \"Morgan Freeman\",\n",
    "             \"Samuel L. Jackson\",\"Nicolas Cage\",\"Bruce Willis\"],\n",
    "}}})\n",
    "\n",
    "\n",
    "castT = movies['movies'].count_documents({\"cast\": {\n",
    "    \"$nin\": [\"GÃ¨rard Depardieu\", \"Robert De Niro\", \"Morgan Freeman\",\n",
    "             \"Samuel L. Jackson\",\"Nicolas Cage\",\"Bruce Willis\"],\n",
    "}})\n",
    "\n",
    "castF = movies['movies'].count_documents({\"cast\": {\n",
    "    \"$exists\": False\n",
    "}})\n",
    "\n",
    "print(f'{castT} exists, {castF} doesnt exist, and total {original}.')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "tkaFYhLlPSlG"
   },
   "source": [
    "## Question 8\n",
    "\n",
    "Write the following in MongoDB:\n",
    "    \n",
    "SELECT name, number_of_reviews, beds <br>\n",
    "FROM airbnb <br>\n",
    "WHERE number_of_reviews >= 200 <br>\n",
    "ORDER BY beds DESC <br>\n",
    "LIMIT 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "oHrdgDk8PSlH",
    "outputId": "805f8bb1-7105-4dfa-abdb-fce017347a24"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'name': 'Beautiful Home Away From Home!',\n",
       "  'beds': 7,\n",
       "  'number_of_reviews': 219}]"
      ]
     },
     "execution_count": 66,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(airbnb\n",
    "     .find({\"number_of_reviews\": {\"$gte\": 200}},\n",
    "           {\"_id\":0, \"name\":1,\"number_of_reviews\":1, \"beds\":1})\n",
    "     .sort(\"beds\",-1)\n",
    "     .limit(1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "8PzdLyvlPSlH"
   },
   "source": [
    "## Question 9 - Special Case $ne\n",
    "\n",
    "Return the count of all documents where the \"tomates.viewer.rating\" value is \"$ne\" to 3."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "jqq83pbUPSlH",
    "outputId": "5e6c3f92-122c-440e-8d0f-62b90d2287ea"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "23481"
      ]
     },
     "execution_count": 24,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "movies['movies'].count_documents({\"tomatoes.viewer.rating\": { \"$ne\": 2} })\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 475,
     "status": "ok",
     "timestamp": 1611708183953,
     "user": {
      "displayName": "Arsames Qajar",
      "photoUrl": "",
      "userId": "07297027633013273984"
     },
     "user_tz": 480
    },
    "id": "lg340DndPSlH",
    "outputId": "2b75c7e8-2f24-4e22-bd9d-7d14b3ab38a2"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'_id': ObjectId('573a1390f29313caabcd4135'),\n",
       "  'awards': {'nominations': 0, 'text': '1 win.', 'wins': 1},\n",
       "  'cast': ['Charles Kayser', 'John Ott'],\n",
       "  'countries': ['USA'],\n",
       "  'directors': ['William K.L. Dickson'],\n",
       "  'fullplot': 'A stationary camera looks at a large anvil with a blacksmith behind it and one on either side. The smith in the middle draws a heated metal rod from the fire, places it on the anvil, and all three begin a rhythmic hammering. After several blows, the metal goes back in the fire. One smith pulls out a bottle of beer, and they each take a swig. Then, out comes the glowing metal and the hammering resumes.',\n",
       "  'genres': ['Short'],\n",
       "  'imdb': {'id': 5, 'rating': 6.2, 'votes': 1189},\n",
       "  'lastupdated': '2015-08-26 00:03:50.133000000',\n",
       "  'num_mflix_comments': 1,\n",
       "  'plot': 'Three men hammer on an anvil and pass a bottle of beer around.',\n",
       "  'rated': 'UNRATED',\n",
       "  'released': datetime.datetime(1893, 5, 9, 0, 0),\n",
       "  'runtime': 1,\n",
       "  'title': 'Blacksmith Scene',\n",
       "  'tomatoes': {'lastUpdated': datetime.datetime(2015, 6, 28, 18, 34, 9),\n",
       "   'viewer': {'meter': 32, 'numReviews': 184, 'rating': 3.0}},\n",
       "  'type': 'movie',\n",
       "  'year': 1893}]"
      ]
     },
     "execution_count": 17,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Note: $ne returns all ddocuments that match the criteria, including documents where the field does not exist.\n",
    "# https://docs.mongodb.com/manual/reference/operator/query/ne/\n",
    "\n",
    "original = movies['movies'].count_documents({\"tomatoes.viewer.rating\": { \"$ne\": 2} })\n",
    "\n",
    "\n",
    " list(movies['movies'].count_documents({\"tomatoes.viewer.rating\": { \"$ne\": 2, \"$exists\": True} }))\n",
    "existF = movies['movies'].count_documents({\"tomatoes.viewer.rating\": { \"$ne\": 2, \"$exists\": False} })\n",
    "\n",
    "\n",
    "\n",
    "print(f'{existT} exists, {existF} doesnt exist, and total {original}.')\n",
    "\n",
    "# list(movies['movies'].find({\"tomatoes.viewer.rating\": { \"$ne\": 2, \"$exists\": True} }).limit(1))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "_Bu7FJvQPSlI"
   },
   "source": [
    "## Question 10 - $in\n",
    "\n",
    "Return the count of all the documents that have the \"property_type\" value of \"Bungalow\" and \"amenities\" that have the following items: \"TV\", \"Wifi\",\"Smart TV\", \"Heating\", \"Swimming Pool\", \"Waterfront\",\"Gym\",\"Beachfront\",\"Safe\",\"Refrigerator\", and a \"Tennis Court\".\n",
    "\n",
    "### Note\n",
    "Although you can express this query using the OR operator, choose the IN operator rather than the OR operator when performing equality checks on the same field."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "5XIt397rPSlJ",
    "outputId": "02195866-2486-4970-a789-28ab25da06b8"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "14"
      ]
     },
     "execution_count": 116,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "airbnb.count_documents({\n",
    "    \"property_type\":\"Bungalow\",\n",
    "    \"amenities\": { \"$in\": [\"TV\", \"Wifi\",\"Smart TV\", \"Heating\", \"Swimming Pool\", \n",
    "                           \"Waterfront\",\"Gym\",\"Beachfront\",\"Safe\",\"Refrigerator\", \"Tennis Court\"] \n",
    "}}) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "asOwA361PSlJ"
   },
   "source": [
    "# Logical Operators\n",
    "\n",
    "~~~\n",
    "$and: Joins query clauses with a logical AND returns all documents that match the conditions of both clauses.\n",
    "$not: Inverts the effect of a query expression and returns documents that do not match the query expression.\n",
    "$nor: Joins query clauses with a logical NOR returns all documents that fail to match both clauses.\n",
    "$or: Joins query clauses with a logical OR returns all documents that match the conditions of either clause.\n",
    "~~~\n",
    "\n",
    "See https://docs.mongodb.com/manual/reference/operator/query-logical/ for more info."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "nmF1AolwPSlJ"
   },
   "source": [
    "## The OR operator examples\n",
    "\n",
    "~~~\n",
    "Syntax: { $or: [ { <expression1> }, { <expression2> }, ... , { <expressionN> } ] }\n",
    "~~~"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "7CsqQhdIPSlJ"
   },
   "source": [
    "## Question 11\n",
    "\n",
    "Rewrite the above question (Question 10) using the $or operator. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "oEdXWIImPSlJ",
    "outputId": "b69c19fd-05bd-4706-cd0b-caf0d9c3a9cf"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "14"
      ]
     },
     "execution_count": 9,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "airbnb.count_documents({\n",
    "    \"property_type\":\"Bungalow\",\n",
    "    \"$or\": [{\"amenities\": \"TV\"}, {\"amenities\": \"Wifi\"}, {\"amenities\": \"Smart TV\"}, {\"amenities\": \"Heating\"},\n",
    "            {\"amenities\": \"Swimming Pool\"}, {\"amenities\": \"Waterfront\"},{\"amenities\": \"Gym\"}, \n",
    "            {\"amenities\": \"BeachFront\"}, {\"amenities\": \"Safe\"}, {\"amenities\": \"Refrigerator\"},\n",
    "            {\"amenities\": \"Tennis Court\"}] \n",
    "}) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "IJUaiLtIPSlK"
   },
   "source": [
    "### Note\n",
    "\n",
    "\n",
    "However, if using the same field, typically easier and beneficial to use the IN operator as \n",
    "opposed to writing out the entire IN expression to avoid field repetition. \n",
    "\n",
    "Although you can express this query using the OR operator, choose the IN operator rather than the OR operator when performing equality checks on the same field."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "9OuyqoLYPSlK"
   },
   "source": [
    "## Question 12\n",
    "\n",
    "Return the count of all documents in the movies database and movies collection (i.e. movies[\"movies\"]) where the document had either a \"rated\" value of \"PG\" or \"PG-13\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "rYfyV-RvPSlK",
    "outputId": "8876dbe2-7610-42cb-c6f0-faaba8c9df45"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4176"
      ]
     },
     "execution_count": 146,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "movies[\"movies\"].count_documents({\"$or\":[{\"rated\":'PG'},{\"rated\":'PG-13'}]})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "zB_zbDypPSlK"
   },
   "source": [
    "#### How would you rewrite the above in SQL?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "n4CG3y7KPSlK"
   },
   "source": [
    "~~~\n",
    "SELECT COUNT(*)\n",
    "FROM movies\n",
    "WHERE rated=\"PG\" or rated=\"PG-13\"\n",
    "~~~"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "hmPaRAPJPSlL"
   },
   "source": [
    "## Note - Conjunctive vs Disjunctive case\n",
    "\n",
    "field plus expression with operators gets evaluated together, whereas when it's listed separately, it gets evaluated separately. Below, we will examine these cases separately."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "rDhw9TVCPSlL"
   },
   "source": [
    "## Question 13 - conjunctive\n",
    "\n",
    "Return two movies sorted by year descending where either the \"awards.wins\" value is greater than 250 or \n",
    "the \"year\" is between 2000 and 2005."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 232
    },
    "executionInfo": {
     "elapsed": 515,
     "status": "error",
     "timestamp": 1612299785452,
     "user": {
      "displayName": "Arsames Qajar",
      "photoUrl": "",
      "userId": "07297027633013273984"
     },
     "user_tz": 480
    },
    "id": "IbjAH7krPSlL",
    "outputId": "882b4747-0be0-4453-fb23-494f4d451805"
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "ignored",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-2-84dec4f0366c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m list(movies.find({\n\u001b[0m\u001b[1;32m      2\u001b[0m     \"$or\":[\n\u001b[1;32m      3\u001b[0m         \u001b[0;34m{\u001b[0m\u001b[0;34m\"awards.wins\"\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m\"$gt\"\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;36m250\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m         \u001b[0;34m{\u001b[0m\u001b[0;34m\"year\"\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m\"$gt\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m2000\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"$lt\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m2005\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m#         this is a range in the above. A \"non-inclusive\" between. SQL between is inclusive.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'movies' is not defined"
     ]
    }
   ],
   "source": [
    "list(movies.find({\n",
    "    \"$or\":[\n",
    "        {\"awards.wins\": {\"$gt\": 250}},\n",
    "        {\"year\": {\"$gt\":2000, \"$lt\":2005}}\n",
    "#         this is a range in the above. A \"non-inclusive\" between. SQL between is inclusive. \n",
    "    ]},{\"year\":1, \"title\":1, \"awards.wins\":1})\n",
    "    .sort(\"year\",-1)\n",
    "    .limit(2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "ib2NMl2APSlM"
   },
   "source": [
    "## Question 14 - disjunctive\n",
    "\n",
    "Return 3 movies sorted by year descending where either the \"awards.wins\" value is greater than 250 or \n",
    "the \"year\" is less than 2005 or greater than 2015."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "-sGAhDYtPSlM",
    "outputId": "e7e08f59-d529-488c-9e7c-e98e12126024"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'_id': ObjectId('573a13e6f29313caabdc6a9a'),\n",
       "  'title': 'The Masked Saint',\n",
       "  'awards': {'wins': 1},\n",
       "  'year': 2016},\n",
       " {'_id': ObjectId('573a13d5f29313caabd9cae7'),\n",
       "  'year': 2013,\n",
       "  'title': '12 Years a Slave',\n",
       "  'awards': {'wins': 267}},\n",
       " {'_id': ObjectId('573a139df29313caabcf9fef'),\n",
       "  'title': 'Bluebird',\n",
       "  'awards': {'wins': 3},\n",
       "  'year': 2004}]"
      ]
     },
     "execution_count": 7,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(movies[\"movies\"].find({\n",
    "    \"$or\":[\n",
    "        {\"awards.wins\": {\"$gt\": 250}},\n",
    "        {\"year\": {\"$lt\":2005}},\n",
    "        {\"year\": {\"$gt\":2015}}\n",
    "#         these two \"year\" expressions get evaluated separately and therefore no range\n",
    "    ]},{\"year\":1, \"title\":1, \"awards.wins\":1})\n",
    "    .sort(\"year\",-1)\n",
    "    .limit(3))\n",
    "\n",
    "\n",
    "# each case is matched in the above"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "-SpjXfQVPSlM"
   },
   "source": [
    "## The AND operator examples\n",
    "\n",
    "~~~\n",
    "Syntax: { $and: [ { <expression1> }, { <expression2> } , ... , { <expressionN> } ] }\n",
    "~~~"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "4E_0AVgyPSlM"
   },
   "source": [
    "## Question 15 \n",
    "\n",
    "Return a movie that has a \"runtime\" of greater than 90, a year greater than 2000, \n",
    "and an \"imdb.votes\" less than 40."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 232
    },
    "executionInfo": {
     "elapsed": 468,
     "status": "error",
     "timestamp": 1612300656659,
     "user": {
      "displayName": "Arsames Qajar",
      "photoUrl": "",
      "userId": "07297027633013273984"
     },
     "user_tz": 480
    },
    "id": "bifQJplAPSlM",
    "outputId": "40b4105e-6dbe-48fc-9e40-8c8d1897a661"
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "ignored",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-3-4be150a3489b>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m list(movies.find({\"$and\":[\n\u001b[0m\u001b[1;32m      2\u001b[0m     \u001b[0;34m{\u001b[0m\u001b[0;34m\"runtime\"\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m\"$gt\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m90\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0;34m{\u001b[0m\u001b[0;34m\"year\"\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m\"$gt\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m2000\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0;34m{\u001b[0m\u001b[0;34m\"imdb.votes\"\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m\"$lt\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m40\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m ]}).sort(\"year\",-1).limit(1))\n",
      "\u001b[0;31mNameError\u001b[0m: name 'movies' is not defined"
     ]
    }
   ],
   "source": [
    "list(movies.find({\"$and\":[\n",
    "    {\"runtime\": {\"$gt\":90}},\n",
    "    {\"year\": {\"$gt\":2000}},\n",
    "    {\"imdb.votes\": {\"$lt\":40}}\n",
    "]}).sort(\"year\",-1).limit(1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "vsawpQ07PSlN"
   },
   "source": [
    "## Question 16 - review several ways of $and\n",
    "\n",
    "Return the document's title sorted by \"year\" descending that has a \"runtime\" value greater than 100, \"year\" greater than 2000 and less than 2005, and an \"imdb.votes\" value less than 30. Show 3 different ways of writing this query.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "qsXeD4PWPSlN",
    "outputId": "b70924dd-d364-481f-c4ea-7184b40e8646"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Result 1: Living with the Fosters, Result 2: Living with the Fosters, and Result 3: Living with the Fosters.\n"
     ]
    }
   ],
   "source": [
    "x = list(movies[\"movies\"].find({\"$and\":[\n",
    "    {\"runtime\": {\"$gt\":100}},\n",
    "    {\"year\": {\"$gt\":2000}},\n",
    "    {\"year\": {\"$lt\":2005}},\n",
    "    {\"imdb.votes\": {\"$lt\":30}}\n",
    "]},{\"title\":1}).sort(\"year\",-1).limit(1))\n",
    "\n",
    "\n",
    "y = list(movies[\"movies\"].find({\"$and\":[\n",
    "    {\"runtime\": {\"$gt\":100}},\n",
    "    {\"year\": {\"$gt\":2000, \"$lt\":2005}},\n",
    "    {\"imdb.votes\": {\"$lt\":30}}\n",
    "]},{\"title\":1}).sort(\"year\",-1).limit(1))\n",
    "\n",
    "\n",
    "z =  list(movies[\"movies\"]\n",
    "          .find({\n",
    "            \"runtime\": {\"$gt\":100}, \n",
    "            \"year\": {\"$gt\":2000, \"$lt\":2005},\n",
    "            \"imdb.votes\": {\"$lt\":30}})\n",
    "          .sort(\"year\",-1)\n",
    "          .limit(1)\n",
    "         )\n",
    "\n",
    "\n",
    "\n",
    "m1 = x[0]['title']\n",
    "m2 = y[0]['title']\n",
    "m3 = z[0]['title']\n",
    "\n",
    "\n",
    "print(f'Result 1: {m1}, Result 2: {m2}, and Result 3: {m3}.')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "D8zIFYuVPSlN"
   },
   "source": [
    "## Question 17 - implicit vs explicit $and\n",
    "\n",
    "\n",
    "Return a document that has a \"type\" of movie, and where the \"year\" value is less than 1930 or rated a \"PG\", and the \"imdb.votes\" is greater than 100 or the runtime is greater than 120."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "X4FSWtMuPSlN"
   },
   "source": [
    "### Implicit vs Explicit AND syntax\n",
    "\n",
    "Implicit vs Explicit AND:\n",
    "\n",
    "~~~\n",
    "Implicit: {field:value, field:value, ... field:value}\n",
    "\n",
    "Explicit: {$and: : [ {expression1}, {expression2}, ... {expressionN}]}\n",
    "~~~\n",
    "\n",
    "Use the latter to combine multiple logical operators, or, in some cases"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "R7ex0mu3PSlN"
   },
   "source": [
    "### Using Implicit AND\n",
    "The following wont work using implicit $AND\n",
    "\n",
    "\n",
    "\n",
    "~~~\n",
    "list(movies['movies']\n",
    "     .find({\"type\":\"movie\", \n",
    "            \"$or\":[ {\"year\": {\"$lt\":1930}}, {\"rated\": \"PG\"}],\n",
    "            \"$or\":[ {\"imdb.votes\": {\"$gt\":100}}, {\"runtime\": {\"$gt\":120} }]})\n",
    "     .limit(1)\n",
    "     .sort(\"year\",-1))\n",
    "~~~\n",
    "\n",
    "ONLY the last $OR gets applied"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "52yPEQAaPSlO"
   },
   "source": [
    "### SOLUTION - Using Explicit AND to ensure the Logical Operator (OR) is used in all cases"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "IPrTG1iTPSlO",
    "outputId": "4bd8d180-a135-4b19-e1b7-05206d960b58"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'_id': ObjectId('573a13cdf29313caabd841e8'),\n",
       "  'runtime': 105,\n",
       "  'rated': 'PG',\n",
       "  'title': 'Cinderella',\n",
       "  'year': 2015,\n",
       "  'imdb': {'votes': 68498},\n",
       "  'type': 'movie'}]"
      ]
     },
     "execution_count": 63,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(movies['movies']\n",
    "     .find({\"$and\":[\n",
    "            {\"type\":\"movie\"}, \n",
    "            {\"$or\":[ {\"year\": {\"$lt\":1930}}, {\"rated\": \"PG\"}]},\n",
    "            {\"$or\":[ {\"imdb.votes\": {\"$gt\":100}}, {\"runtime\": {\"$gt\": 120} }]}]\n",
    "         },{\"title\":1, \"year\":1, \"runtime\":1, \"imdb.votes\":1, \"rated\":1,\"type\":1})\n",
    "     .limit(1)\n",
    "     .sort(\"year\",-1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "YqJBQHD4PSlO"
   },
   "source": [
    "### Note\n",
    "\n",
    "So when using multiple $or and, potentially other unique cases, the explicit AND may be necessary. See here for more details:\n",
    "\n",
    "https://docs.mongodb.com/manual/reference/operator/query/and/#op._S_and\n",
    "\n",
    "\"This query cannot be constructed using an implicit AND operation, because it uses the $or operator more than once.\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Ns5f-OqAPSlO"
   },
   "source": [
    "## The NOT \n",
    "\n",
    "~~~\n",
    "$NOT syntax: { field: { $not: { <operator-expression> } } }\n",
    "~~~\n",
    "\n",
    "See more here https://docs.mongodb.com/manual/reference/operator/query/not/#op._S_not"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "VUXAv-KuPSlO"
   },
   "source": [
    "## Question 18\n",
    "\n",
    "Return the count of all the documents in training['grades'] dataset where none of the \"scores.score\" values are less than 93.5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "vf-RpLSkPSlO",
    "outputId": "f77df5d6-ad01-4936-9816-025b51177e6f"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'_id': ObjectId('56d5f7ed604eb380b0d93541'),\n",
       "  'student_id': 2366.0,\n",
       "  'scores': [{'type': 'exam', 'score': 94.76193305771264},\n",
       "   {'type': 'quiz', 'score': 97.76548967976919},\n",
       "   {'type': 'homework', 'score': 99.40737859186379},\n",
       "   {'type': 'homework', 'score': 98.25436364550917}],\n",
       "  'class_id': 451.0}]"
      ]
     },
     "execution_count": 79,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Using $not\n",
    "list(training['grades']\n",
    "     .find({\"scores.score\": { \"$not\": {\"$lt\": 93.5} }})\n",
    "     .sort(\"class_id\",-1)\n",
    "     .limit(1))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "njvGBwRDPSlO",
    "outputId": "616130b8-b2c5-4aa3-b6f0-2cd92db9bc39"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'_id': ObjectId('56d5f7eb604eb380b0d8da7e'),\n",
       "  'student_id': 43.0,\n",
       "  'scores': [{'type': 'exam', 'score': 29.438528115173668},\n",
       "   {'type': 'quiz', 'score': 93.45862647470958},\n",
       "   {'type': 'homework', 'score': 95.83097600441303},\n",
       "   {'type': 'homework', 'score': 96.56935104413706}],\n",
       "  'class_id': 500.0}]"
      ]
     },
     "execution_count": 81,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Using $gte\n",
    "list(training['grades']\n",
    "     .find({\"scores.score\": { \"$gte\": 93.5} })\n",
    "     .sort(\"class_id\",-1)\n",
    "     .limit(1))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "4btNfosqPSlP"
   },
   "source": [
    "#### Using GTE vs NOT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "3K5FuxNIPSlP",
    "outputId": "b3b014df-843d-4747-fd3c-9a4ec0bc7c6d"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Result 1: 2, Result 2: 23564.\n"
     ]
    }
   ],
   "source": [
    "x = training['grades'].count_documents({\"scores.score\": { \"$not\": {\"$lt\": 93.5} }})\n",
    "\n",
    "y = training['grades'].count_documents({\"scores.score\": { \"$gte\": 93.5} })\n",
    "\n",
    "\n",
    "print(f'Result 1: {x}, Result 2: {y}.')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "bP3oFJZMPSlP"
   },
   "source": [
    "# Other Operators\n",
    "\n",
    "Element, Evaluation, Geospatial, and Array operators\n",
    "\n",
    "~~~\n",
    "$text: Performs text search.\n",
    "{\n",
    "  $text:\n",
    "    {\n",
    "      $search: <string>,\n",
    "      $language: <string>,\n",
    "      $caseSensitive: <boolean>,\n",
    "      $diacriticSensitive: <boolean>\n",
    "    }\n",
    "}\n",
    "\n",
    "\n",
    "$elemMatch: Selects documents if element in the array field matches all the specified $elemMatch conditions.\n",
    "{ <field>: { $elemMatch: { <query1>, <query2>, ... } } }\n",
    "\n",
    "\n",
    "\n",
    "$size: Selects documents if the array field is a specified size.\n",
    "{ <field>: { $size: value } }\n",
    "\n",
    "\n",
    "\n",
    "$all: Matches arrays that contain all elements specified in the query.\n",
    "{ <field>: { $all: [ <value1> , <value2> ... ] } }\n",
    "\n",
    "~~~\n",
    "text - https://docs.mongodb.com/manual/reference/operator/query/text <br>\n",
    "elemMatch - https://docs.mongodb.com/manual/reference/operator/query/elemMatch/ <br>\n",
    "size - https://docs.mongodb.com/manual/reference/operator/query/size/ <br>\n",
    "all - https://docs.mongodb.com/manual/reference/operator/query/all/"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "wAGV8937PSlP"
   },
   "source": [
    "## Question 19 - $text\n",
    "\n",
    "Return the documents sorted by beds descending that have the word \"park\" or the phrase \"los angeles\" in the description field (index has already been created on \"description\") in the Airbnb dataset. Only return the description, name and limit to 1 result sorted by \"beds\" descending."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "vqiAfdFbPSlP",
    "outputId": "92b2cd42-fd1a-4f1d-ef96-b85e002db0a0"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'_id': '20958766',\n",
       "  'name': 'Great Complex of the Cellars',\n",
       "  'description': 'Our space is a complex with several houses, 3 of them together and the other about 50 meters, with capacity for 22 Adults or children + 2 babies, are close to the city center, parks, art and culture, beautiful scenery, 200 meters from the Port Wine Cellars, about 400 meters from Ribeira de Gaia and the Train Station, about 100 meters from the bus stop, is 1km from Ribeira do Porto. Ideal space for large groups that want to fraternize and relax. When renting these rooms, they are only for you and your family or friends, however, each group of two people has the right to 1 room in the house if they wish to stay in separate rooms. In addition, on-site payment of a â¬ 10 fee, cleaning of the other room, washing and ironing of extra bed linen. It is not allowed, free of charge the occupation of all the houses, without the number of people justify it, example 10 people want to occupy all the houses in the complex, in this situation, if that is the intention of the users, it lacks an extra pay'}]"
      ]
     },
     "execution_count": 112,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(airbnb.find({\"$text\": {\"$search\": \"park oceanview\"}}, {\"name\":1,\"description\":1}).limit(1).sort(\"beds\",-1))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "WL56UFctPSlP"
   },
   "source": [
    "### Note\n",
    "\n",
    "Can't match phrases and individual terms.\n",
    "\n",
    "~~~\n",
    "\"\\\"los angeles\\\" oceanview beach\"\n",
    "\n",
    "~~~\n",
    "\n",
    "Only returns documents in the indexed field that contains \"los angeles\".\n",
    "\n",
    "\n",
    "See here: https://docs.mongodb.com/manual/reference/operator/query/text/#text-operator-phrases"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "PYDLZii2PSlQ",
    "outputId": "e91ab5e8-910b-433a-aefa-f561f65813c8"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Result 1: 1274, Result 2: 1.\n"
     ]
    }
   ],
   "source": [
    "text1 = airbnb.count_documents({\"$text\": {\"$search\": \"park oceanview\"}})\n",
    "text2 = airbnb.count_documents({\"$text\": {\"$search\": \"park oceanview \\\"los angeles\\\"\" }})\n",
    "\n",
    "print(f'Result 1: {text1}, Result 2: {text2}.')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "HpGBOfbaPSlQ"
   },
   "source": [
    "## Question 20 - $elemMatch\n",
    "\n",
    "In the geospatial dataset, sorted by \"latdec\" descending, find a document where the \"coordinates\" the longitude value is greater than -90 but less than or equal -88. Limit to 1 result. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "YMc_yRW7PSlQ",
    "outputId": "71735ef7-2eef-47c7-dc31-fa4d0ea317b0"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'_id': ObjectId('578f6fa3df35c7fbdbaee7ef'),\n",
       "  'recrd': '',\n",
       "  'vesslterms': '',\n",
       "  'feature_type': 'Wrecks - Submerged, dangerous',\n",
       "  'chart': 'US,US,graph,chart 14976',\n",
       "  'latdec': 48.200457,\n",
       "  'londec': -88.49157,\n",
       "  'gp_quality': '',\n",
       "  'depth': '',\n",
       "  'sounding_type': '',\n",
       "  'history': '',\n",
       "  'quasou': 'depth unknown',\n",
       "  'watlev': 'always under water/submerged',\n",
       "  'coordinates': [-88.49157, 48.200457]}]"
      ]
     },
     "execution_count": 138,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Querying Arrays with ElemMatch\n",
    "list(geospatial\n",
    "     .find({\"coordinates\": {\n",
    "         \"$elemMatch\": {\n",
    "              \"$lte\": -88, \"$gt\": -90 \n",
    "         }\n",
    "     }})\n",
    "     .limit(1)\n",
    "     .sort(\"latdec\",-1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "nxbbZhtZPSlQ"
   },
   "source": [
    "## Question 21 - $elemMatch\n",
    "\n",
    "In the training[\"companies\"] dataset, return the count of documents that have at least one embedded document in the \"relationships\" field where the \"person.first_name\" value is \"Ben\" and the \"is_past\" value is False. Compare this count with the count of documents where the \"relationships\" field has an \"is_past\" value of false and a \"person.first_name\" value of \"Ben\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "57uoqCKGPSlQ",
    "outputId": "fe7ed966-cc3d-4351-8e8c-66198f87fbb4"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of matching documents with $elemMatch is: 93. \n",
      "The number without elemMatch is: 167\n"
     ]
    }
   ],
   "source": [
    "elemMatch= training['companies'].count_documents({\n",
    "    \"relationships\": {\n",
    "         \"$elemMatch\": {\n",
    "             \"is_past\":False, \"person.first_name\":'Ben', \n",
    "         }\n",
    "     }})\n",
    "     \n",
    "\n",
    "\n",
    "noMatch = training['companies'].count_documents({\n",
    "                                    \"relationships.is_past\": False , \n",
    "                                    \"relationships.person.first_name\":'Ben',\n",
    "                                     }) \n",
    "         \n",
    "    \n",
    "print(f'Number of matching documents with $elemMatch is: {elemMatch}. \\nThe number without elemMatch is: {noMatch}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "LdDv9PD2PSlQ"
   },
   "source": [
    "## Question 22 - $elemMatch\n",
    "\n",
    "In the grades collection, find a document where one element matches the type of \"scores.type\" \n",
    "of \"exam\" and \"scores.score\" is greater than 97."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "YUJftLnnPSlR",
    "outputId": "37419c1e-6d85-463c-e099-910d72fc3616"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'_id': ObjectId('56d5f7ed604eb380b0d93cbb'),\n",
       "  'student_id': 2558.0,\n",
       "  'scores': [{'type': 'exam', 'score': 99.67998232047304},\n",
       "   {'type': 'quiz', 'score': 97.7804351872388},\n",
       "   {'type': 'homework', 'score': 74.18369634780653},\n",
       "   {'type': 'homework', 'score': 34.231604946411345}],\n",
       "  'class_id': 500.0}]"
      ]
     },
     "execution_count": 143,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Query Embedded Documents\n",
    "list(grades\n",
    "     .find({\"scores\": {\n",
    "         \"$elemMatch\": {\n",
    "             \"type\":\"exam\",\"score\": {\"$gt\":97}\n",
    "         }\n",
    "     }})\n",
    "     .limit(1)\n",
    "     .sort(\"class_id\",-1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "l8V-_u4wPSlR"
   },
   "source": [
    "### See the difference below, without $elemMatch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "LLxWPcllPSlR",
    "outputId": "6d1c783a-6f72-4fe5-f752-06ddfb37fdfe"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'_id': ObjectId('56d5f7eb604eb380b0d8e19c'),\n",
       "  'student_id': 225.0,\n",
       "  'scores': [{'type': 'exam', 'score': 58.07992998335484},\n",
       "   {'type': 'quiz', 'score': 83.54136003606982},\n",
       "   {'type': 'homework', 'score': 99.40704589486455},\n",
       "   {'type': 'homework', 'score': 12.85542380958925}],\n",
       "  'class_id': 500.0}]"
      ]
     },
     "execution_count": 155,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Query Embedded Documents\n",
    "list(grades\n",
    "     .find({\"scores.type\": \"exam\",\"scores.score\": {\"$gt\":97}\n",
    "     })\n",
    "     .limit(1)\n",
    "     .sort(\"class_id\",-1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "8doqAh33PSlR"
   },
   "source": [
    "## Question 23 - $size\n",
    "\n",
    "In the Airbnb dataset, return the count of documents that have an \"amenities\" field size of 25.\n",
    "\n",
    "### Note\n",
    "This operator does not accept other operators or ranges i.e. \"$size\": {$gt: 15} for example"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "6JljrKA9PSlR",
    "outputId": "d5d5cbb8-2c8a-4488-d14c-e2d77c635b12"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "173"
      ]
     },
     "execution_count": 146,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "airbnb.count_documents({ \"amenities\": {\"$size\": 25 } })"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "WxHmxHK1PSlR"
   },
   "source": [
    "## Question 24 - $all\n",
    "\n",
    "Return the count of documents that have all the following values in the \"amenities\" field: 'TV', 'Kitchen', 'Wifi', 'Internet','Cable TV', 'Coffee maker', 'Cooking basics','Family/kid friendly', 'Gym', and 'Heating'. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "He5IUbm-PSlR",
    "outputId": "f14d3b18-1a2d-4c9c-e1c3-1dac9bce569d"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8"
      ]
     },
     "execution_count": 153,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "airbnb.count_documents({\"amenities\": {\"$all\": ['TV', 'Kitchen', 'Wifi', 'Internet','Cable TV', \n",
    "                                               'Coffee maker', 'Cooking basics',\n",
    "                                               'Family/kid friendly', 'Gym', \n",
    "                                               'Heating']}})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "P0p-0k33PSlS"
   },
   "source": [
    "## Question 25 - $all with elemMatch\n",
    "\n",
    "Return a single document sorted by class_id descending where there's one embeddded document that has \"scores.type\" of exam and \"scores.score\" of greater than 97, \"scores.type\" of quiz and \"scores.score\" of greater than 96, and\n",
    "\"scores.type\" of homework and \"scores.score\" of greater than 95."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "GGRTocCjPSlS",
    "outputId": "525be64f-5dd0-4b63-e437-6af52d1120d0"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'_id': ObjectId('56d5f7f1604eb380b0da4b05'),\n",
       "  'student_id': 9477.0,\n",
       "  'scores': [{'type': 'exam', 'score': 97.70221871186124},\n",
       "   {'type': 'quiz', 'score': 98.38639086583655},\n",
       "   {'type': 'homework', 'score': 43.71678839949483},\n",
       "   {'type': 'homework', 'score': 97.78339211813662}],\n",
       "  'class_id': 439.0}]"
      ]
     },
     "execution_count": 159,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Query Embedded Documents\n",
    "list(grades\n",
    "     .find({\"scores\": {\n",
    "         \"$all\":[\n",
    "            {\"$elemMatch\": {\"type\":\"exam\",\"score\": {\"$gt\":97}}},\n",
    "            {\"$elemMatch\": {\"type\":\"quiz\",\"score\": {\"$gt\":96}}},\n",
    "            {\"$elemMatch\": {\"type\":\"homework\",\"score\": {\"$gt\":95}}}\n",
    "         ]\n",
    "         \n",
    "     }})\n",
    "     .limit(1)\n",
    "     .sort(\"class_id\",-1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "hN6UzHyfPSlS"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "asO2wE4KPSlS"
   },
   "source": [
    "# More Problems"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "CuYxsGIDPSlS"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "SEstGXbJPSlS"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "5h1bcCGSPSlS"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "8MQw61cOPSlT"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "I2d9hEKCPSlT"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "zFLn_uJiPSlT"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "JQ2VH84NPSlT"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "PGk9PodUPSlT"
   },
   "source": [
    "### Question 5a ---> Explicit vs Implicit AND\n",
    "Explicit and Implicit AND"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "MKbXHTd9PSlT"
   },
   "outputs": [],
   "source": [
    "######## EXPLICIT AND ########\n",
    ".find({\"$and\":[\n",
    "                 {\"review_scores.review_scores_rating\":{\"$gt\":90}}, \n",
    "                 {\"review_scores.review_scores_rating\":{\"$lte\":99}}\n",
    "             ]}, \n",
    "      \n",
    "      \n",
    "######## IMPLICIT AND ########      \n",
    ".find({\"review_scores.review_scores_rating\": {\"$gt\":90, \"$lte\":99}},"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "GCE73GzoPSlT"
   },
   "source": [
    "### Question 6\n",
    "\n",
    "Find Listings where the âreview_scores.review_scores_ratingâ is greater than 90 or the ânumber_of_reviewsâ is greater than 200, AND the price is either less than or equal to 80 or the âaddress.countryâ is the United States. Only return the name, âreview_scoresâ, ânumber_of_reviewsâ, âaddress.countryâ, and price. Sort by ânumber_of_reviewsâ descending, and limit to 2 results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "lOml-4znPSlT"
   },
   "outputs": [],
   "source": [
    "list(airbnb\n",
    "     .find({\"$and\":[\n",
    "                 {\"$or\": [{\"accommodates\":{\"$lt\":2}}, {\"number_of_reviews\":{\"$gt\":500}} ]}, \n",
    "                 {\"$or\" :[{\"price\":{\"$gte\":100}}, {\"room_type\": \"Private room\"}]}\n",
    "             ]}, \n",
    "           {\"_id\":0, \"name\":1, \"accommodates\":1,\"room_type\":1,\"number_of_reviews\":1, \"price\":1})\n",
    "     .sort(\"number_of_reviews\",-1)\n",
    "     .limit(2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "0pvCZptmPSlU"
   },
   "outputs": [],
   "source": [
    "#elemMatch\n",
    "# To restrict multiple conditions to the same subdocument, you use the $elemMatch operator\n",
    "# Logically, use $elemMatch only when you need to match two or more attributes in a subdocumen"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "UD3FiHSaPSlU"
   },
   "source": [
    "### Question 7\n",
    "\n",
    "Find Listings where the price is less than 100, the \"review_scores.review_scores_rating\" is greater than 90 AND accommodates less than 3 people OR is in the âadddress.countryâ of the United States."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "LWOv2NMuPSlU"
   },
   "outputs": [],
   "source": [
    "list(airbnb\n",
    "     .find({ \"price\":{\"$lt\":100}, \"review_scores.review_scores_rating\":{\"$gt\":90},\n",
    "             \"$or\":[ {\"accommodates\":{\"$lt\":3}} , {\"address.country\": \"United States\" }]}, \n",
    "           {\"_id\":0, \"name\":1, \"price\":1,\"accommodates\":1, \"address.country\":1,\n",
    "            \"number_of_reviews\":1, \"review_scores.review_scores_rating\":1})\n",
    "     .sort(\"number_of_reviews\",-1)\n",
    "     .limit(2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "f6NBLKUfPSlU"
   },
   "source": [
    "### Question 8 - Match EXACT Array Values \n",
    "\n",
    "Find listings that only have the following \"amenities\": 'TV' and 'Wifi'. Only return the \"listing_url\", amenities, price, and \"address.country\". Sort by price ascending, limit to 1 result."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "VCSyjU-cPSlU"
   },
   "outputs": [],
   "source": [
    "list(airbnb\n",
    "     .find({'amenities': [ 'TV','Wifi'] }, \n",
    "           {\"_id\":0,'listing_url':1, 'amenities':1, \"price\":1, \"address.country\":1})\n",
    "     .sort(\"price\",1)\n",
    "     .limit(1)\n",
    "    )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "kJKU6dVePSlU"
   },
   "source": [
    "### Question 9 - ALL elements exist in Array \n",
    "\n",
    "Find listings that have the following \"amenities\": 'TV', 'Air conditioning', 'Essentials' and is in \"address.country\" of Brazil. ONLY return the name, amenities, price, and \"address.country\". Sort by price ascending and limit to 1 result."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "6hTOSr0SPSlU",
    "outputId": "18cf09cd-41bc-433f-b1b3-7821ebcf5726"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'name': 'Quarto 9 Camas ( Suite) LE HOUSE HOSTEL 2',\n",
       "  'room_type': 'Shared room',\n",
       "  'amenities': ['TV',\n",
       "   'Wifi',\n",
       "   'Air conditioning',\n",
       "   'Kitchen',\n",
       "   'Smoking allowed',\n",
       "   'Breakfast',\n",
       "   'First aid kit',\n",
       "   'Safety card',\n",
       "   'Fire extinguisher',\n",
       "   'Essentials',\n",
       "   'Lock on bedroom door',\n",
       "   'translation missing: en.hosting_amenity_49',\n",
       "   'translation missing: en.hosting_amenity_50'],\n",
       "  'price': Decimal128('48.00'),\n",
       "  'address': {'country': 'Brazil'}}]"
      ]
     },
     "execution_count": 26,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(airbnb\n",
    "     .find({'amenities': {\"$all\":['TV', 'Air conditioning', 'Essentials']}, \"address.country\":\"Brazil\" }, \n",
    "           {\"_id\":0,'name':1, \"room_type\":1,'amenities':1, \"price\":1, \"address.country\":1})\n",
    "     .sort(\"price\",1)\n",
    "     .limit(1)\n",
    "    )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "-TYHhj4ePSlV"
   },
   "source": [
    "### Question 10  - Rewrite with explicit AND"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "OT6-u6bXPSlV"
   },
   "outputs": [],
   "source": [
    "list(airbnb\n",
    "     .find({\"$and\":[\n",
    "             {'amenities': 'TV'}, {'amenities':'Air conditioning'}, {'amenities':'Essentials'},\n",
    "             {\"address.country\":\"Brazil\"},\n",
    "         ]},\n",
    "           {\"_id\":0,'name':1, 'amenities':1, \"price\":1, \"address.country\":1})\n",
    "     .sort(\"price\",1)\n",
    "     .limit(1)\n",
    "    )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "QjsoqNFyPSlV"
   },
   "source": [
    "### Question 11 - Complex Array, Embedded Query\n",
    "\n",
    "Find listings where the ânumber_of_reviewsâ is greater than 100, has at least the following âWifi, TV, Essentials, Coffee maker, Refrigeratorâ as amenities, and has either more than 5 beds or a âreview_scores.review_scores_ratingâ greater than 97, or where the âhost.host_is_superhostâ is True or the âproperty_typeâ is a Villa.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "lMJ_C_o3PSlV"
   },
   "outputs": [],
   "source": [
    "list(airbnb\n",
    "     .find({\"number_of_reviews\":{\"$gt\":100}, \n",
    "            \"amenities\": {\"$all\":[\"Wifi\",\"TV\",\"Essentials\",'Coffee maker','Refrigerator']},\n",
    "        \"$and\":[\n",
    "                {\"$or\": [ \n",
    "                    {\"beds\": {\"$gt\":5} }, {'review_scores.review_scores_rating': {\"$gt\":97}}\n",
    "                ]},\n",
    "                {\"$or\": [ \n",
    "                    {\"host.host_is_superhost\":True}, {\"property_type\":  \"Villa\"}\n",
    "                ]}\n",
    "             ]\n",
    "           },\n",
    "           {\"_id\":0,'name':1, 'amenities':1, \"beds\":1, \"address.country\":1,\"number_of_reviews\":1,\n",
    "           'review_scores.review_scores_rating':1,\"property_type\":1,\"host.host_is_superhost\":1})\n",
    "     .sort(\"price\",-1)\n",
    "     .limit(1)\n",
    "    )\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Y5LrG1Z-PSlV"
   },
   "source": [
    "### Question 12 - Query Array of Embedded Documents\n",
    "\n",
    "Find listings the \"reviews.reviewer_name\" is Theo. Sort by name ascending, and only return the name and \"reviews.reviewer_name\". Limit to 1 result."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "HDP57fCTPSlV"
   },
   "outputs": [],
   "source": [
    "list(airbnb\n",
    "     .find({'reviews.reviewer_name': 'Theo'}, {\"name\":1, \"reviews.reviewer_name\":1})\n",
    "     .sort(\"name\",1)\n",
    "     .limit(1)\n",
    "    )\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Fl0kyj1HPSlV"
   },
   "source": [
    "### Question 13 - Query Array of Embedded Documents by Index\n",
    "\n",
    "Find the listings where the name of the first reviewer (i.e. the review_name within the reviews) is \"Theo\". ONLY return the name and the reviews."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "o5hgX1BCPSlW"
   },
   "outputs": [],
   "source": [
    "airbnb.find({'reviews.0.reviewer_name': 'Theo'},{\"_id\":0, \"name\":1, \"reviews\":1}).next()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Sr5COCNFPSlW"
   },
   "source": [
    "### Question 14 - Single Nested Document Matches Multiple Criteria \n",
    "\n",
    "Return the count of the number of documents of two different queries, one using $elemMatch and one not using it. Both have the following conditions: \"relationships.is_past\" is False, and the \"relationships.person.first_name\" is Ben."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "WWhcKTynPSlW",
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "elemMatch= training['companies'].count_documents({\n",
    "    \"relationships\": {\n",
    "         \"$elemMatch\": {\n",
    "             \"is_past\":False, \"person.first_name\":'Ben', \n",
    "         }\n",
    "     }})\n",
    "     \n",
    "\n",
    "\n",
    "noMatch = training['companies'].count_documents({\n",
    "                                    \"relationships.is_past\": False , \n",
    "                                    \"relationships.person.first_name\":'Ben',\n",
    "                                     }) \n",
    "         \n",
    "    \n",
    "print(f'Number of matching documents with $elemMatch: {elemMatch} and without elemMatch: {noMatch}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "qAyBoK8rPSlW"
   },
   "source": [
    "### Question 15 - All Nested Documents Match Query Criteria   \n",
    "Retrieve all documents where the âscores.scoreâ is at least a 94."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "zvTPpigPPSlW",
    "outputId": "7690aaf1-ae23-4084-982e-ab734b05280b"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'_id': ObjectId('56d5f7ec604eb380b0d916fb'),\n",
       "  'student_id': 1591.0,\n",
       "  'scores': [{'type': 'exam', 'score': 95.3659889919497},\n",
       "   {'type': 'quiz', 'score': 97.0992790948561},\n",
       "   {'type': 'homework', 'score': 96.27300118012238},\n",
       "   {'type': 'homework', 'score': 94.84311311981534}],\n",
       "  'class_id': 213.0},\n",
       " {'_id': ObjectId('56d5f7ed604eb380b0d93541'),\n",
       "  'student_id': 2366.0,\n",
       "  'scores': [{'type': 'exam', 'score': 94.76193305771264},\n",
       "   {'type': 'quiz', 'score': 97.76548967976919},\n",
       "   {'type': 'homework', 'score': 99.40737859186379},\n",
       "   {'type': 'homework', 'score': 98.25436364550917}],\n",
       "  'class_id': 451.0}]"
      ]
     },
     "execution_count": 3,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(training['grades']\n",
    "     .find({\"scores.score\": { \"$not\": {\"$lt\": 94} } }))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "iszHXWZnPSlW"
   },
   "source": [
    "### Question 16 - Explain Query listing_url field  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "wNqxl2GMPSlW",
    "outputId": "dd8c631e-4308-415c-a342-794c4e611eda"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'queryPlanner': {'plannerVersion': 1,\n",
       "  'namespace': 'sample_airbnb.listingsAndReviews',\n",
       "  'indexFilterSet': False,\n",
       "  'parsedQuery': {'listing_url': {'$eq': 'https://www.airbnb.com/rooms/13906039'}},\n",
       "  'winningPlan': {'stage': 'COLLSCAN',\n",
       "   'filter': {'listing_url': {'$eq': 'https://www.airbnb.com/rooms/13906039'}},\n",
       "   'direction': 'forward'},\n",
       "  'rejectedPlans': []},\n",
       " 'executionStats': {'executionSuccess': True,\n",
       "  'nReturned': 1,\n",
       "  'executionTimeMillis': 3,\n",
       "  'totalKeysExamined': 0,\n",
       "  'totalDocsExamined': 5555,\n",
       "  'executionStages': {'stage': 'COLLSCAN',\n",
       "   'filter': {'listing_url': {'$eq': 'https://www.airbnb.com/rooms/13906039'}},\n",
       "   'nReturned': 1,\n",
       "   'executionTimeMillisEstimate': 0,\n",
       "   'works': 5557,\n",
       "   'advanced': 1,\n",
       "   'needTime': 5555,\n",
       "   'needYield': 0,\n",
       "   'saveState': 43,\n",
       "   'restoreState': 43,\n",
       "   'isEOF': 1,\n",
       "   'invalidates': 0,\n",
       "   'direction': 'forward',\n",
       "   'docsExamined': 5555},\n",
       "  'allPlansExecution': []},\n",
       " 'serverInfo': {'host': 'cluster0-shard-00-00-pfhcv.mongodb.net',\n",
       "  'port': 27017,\n",
       "  'version': '4.0.13',\n",
       "  'gitVersion': 'bda366f0b0e432ca143bc41da54d8732bd8d03c0'},\n",
       " 'ok': 1.0,\n",
       " 'operationTime': Timestamp(1575269456, 4),\n",
       " '$clusterTime': {'clusterTime': Timestamp(1575269456, 4),\n",
       "  'signature': {'hash': b'\\x16$\\x80\\x9c\\xcc@\\xac\\xa4\\x87\\xe7\\x11.\\xdfJ\\xe9\\x0f[\\xcf\\xb9\\xd8',\n",
       "   'keyId': 6763007632023224321}}}"
      ]
     },
     "execution_count": 72,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "airbnb.find({'listing_url': 'https://www.airbnb.com/rooms/13906039'}).explain()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "n9JybYIRPSlX"
   },
   "source": [
    "### Question 17 - Explain Query on name  field \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "Lzu4WAh5PSlX",
    "outputId": "d9ec757c-d546-4ac6-a579-b705d06ab7dd"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'queryPlanner': {'plannerVersion': 1,\n",
       "  'namespace': 'sample_airbnb.listingsAndReviews',\n",
       "  'indexFilterSet': False,\n",
       "  'parsedQuery': {'name': {'$eq': 'Quarto 9 Camas ( Suite) LE HOUSE HOSTEL 2'}},\n",
       "  'winningPlan': {'stage': 'FETCH',\n",
       "   'inputStage': {'stage': 'IXSCAN',\n",
       "    'keyPattern': {'name': 1},\n",
       "    'indexName': 'name_1',\n",
       "    'isMultiKey': False,\n",
       "    'multiKeyPaths': {'name': []},\n",
       "    'isUnique': False,\n",
       "    'isSparse': False,\n",
       "    'isPartial': False,\n",
       "    'indexVersion': 2,\n",
       "    'direction': 'forward',\n",
       "    'indexBounds': {'name': ['[\"Quarto 9 Camas ( Suite) LE HOUSE HOSTEL 2\", \"Quarto 9 Camas ( Suite) LE HOUSE HOSTEL 2\"]']}}},\n",
       "  'rejectedPlans': []},\n",
       " 'executionStats': {'executionSuccess': True,\n",
       "  'nReturned': 1,\n",
       "  'executionTimeMillis': 0,\n",
       "  'totalKeysExamined': 1,\n",
       "  'totalDocsExamined': 1,\n",
       "  'executionStages': {'stage': 'FETCH',\n",
       "   'nReturned': 1,\n",
       "   'executionTimeMillisEstimate': 0,\n",
       "   'works': 2,\n",
       "   'advanced': 1,\n",
       "   'needTime': 0,\n",
       "   'needYield': 0,\n",
       "   'saveState': 0,\n",
       "   'restoreState': 0,\n",
       "   'isEOF': 1,\n",
       "   'invalidates': 0,\n",
       "   'docsExamined': 1,\n",
       "   'alreadyHasObj': 0,\n",
       "   'inputStage': {'stage': 'IXSCAN',\n",
       "    'nReturned': 1,\n",
       "    'executionTimeMillisEstimate': 0,\n",
       "    'works': 2,\n",
       "    'advanced': 1,\n",
       "    'needTime': 0,\n",
       "    'needYield': 0,\n",
       "    'saveState': 0,\n",
       "    'restoreState': 0,\n",
       "    'isEOF': 1,\n",
       "    'invalidates': 0,\n",
       "    'keyPattern': {'name': 1},\n",
       "    'indexName': 'name_1',\n",
       "    'isMultiKey': False,\n",
       "    'multiKeyPaths': {'name': []},\n",
       "    'isUnique': False,\n",
       "    'isSparse': False,\n",
       "    'isPartial': False,\n",
       "    'indexVersion': 2,\n",
       "    'direction': 'forward',\n",
       "    'indexBounds': {'name': ['[\"Quarto 9 Camas ( Suite) LE HOUSE HOSTEL 2\", \"Quarto 9 Camas ( Suite) LE HOUSE HOSTEL 2\"]']},\n",
       "    'keysExamined': 1,\n",
       "    'seeks': 1,\n",
       "    'dupsTested': 0,\n",
       "    'dupsDropped': 0,\n",
       "    'seenInvalidated': 0}},\n",
       "  'allPlansExecution': []},\n",
       " 'serverInfo': {'host': 'cluster0-shard-00-00-pfhcv.mongodb.net',\n",
       "  'port': 27017,\n",
       "  'version': '4.0.13',\n",
       "  'gitVersion': 'bda366f0b0e432ca143bc41da54d8732bd8d03c0'},\n",
       " 'ok': 1.0,\n",
       " 'operationTime': Timestamp(1575278293, 4),\n",
       " '$clusterTime': {'clusterTime': Timestamp(1575278293, 4),\n",
       "  'signature': {'hash': b'\\xb3\\xc80\\xdcP\\xb1\\xb3\\xd0\\x06\\xf6:\"\\x8c\\x83\\xf9\\xb1\\xba\\xab\\x13)',\n",
       "   'keyId': 6763007632023224321}}}"
      ]
     },
     "execution_count": 74,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "airbnb.find({'name': 'Quarto 9 Camas ( Suite) LE HOUSE HOSTEL 2'}).explain()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "g93HQKwBPSlX"
   },
   "source": [
    "### Question 18 - Using the IN Comparison operator   \n",
    "\n",
    " Count all the documents that either have a âproperty_typeâ of Treehouse, Houseboat or Hostel."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "tAApDNT9PSlX",
    "outputId": "820ff375-bebf-4b5b-948a-6ad310f4f0eb"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "36"
      ]
     },
     "execution_count": 77,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "airbnb.count_documents({\"property_type\": {\"$in\":[\"Treehouse\",\"Houseboat\",\"Hostel\"]}})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "iG9MlPSdPSlX",
    "outputId": "f6e34ade-394c-4ff9-b0d5-bbcbf84959d8"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "36"
      ]
     },
     "execution_count": 78,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "airbnb.count_documents({\"$or\":[ {\"property_type\":\"Treehouse\"},\n",
    "                               {\"property_type\":\"Houseboat\"},\n",
    "                               {\"property_type\":\"Hostel\"}] })"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "Yv-FUWfNPSlX"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "RWHVkhNkPSlY"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "v1TiUWMXPSlY"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "ch2egeXQPSlY"
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [
    "nmF1AolwPSlJ",
    "7CsqQhdIPSlJ",
    "IJUaiLtIPSlK",
    "9OuyqoLYPSlK",
    "zB_zbDypPSlK",
    "hmPaRAPJPSlL",
    "rDhw9TVCPSlL",
    "ib2NMl2APSlM",
    "-SpjXfQVPSlM",
    "4E_0AVgyPSlM",
    "vsawpQ07PSlN",
    "D8zIFYuVPSlN",
    "X4FSWtMuPSlN",
    "R7ex0mu3PSlN",
    "52yPEQAaPSlO",
    "YqJBQHD4PSlO",
    "Ns5f-OqAPSlO",
    "VUXAv-KuPSlO",
    "4btNfosqPSlP",
    "wAGV8937PSlP",
    "WL56UFctPSlP",
    "HpGBOfbaPSlQ",
    "nxbbZhtZPSlQ",
    "LdDv9PD2PSlQ",
    "l8V-_u4wPSlR",
    "8doqAh33PSlR",
    "WxHmxHK1PSlR",
    "P0p-0k33PSlS",
    "PGk9PodUPSlT",
    "GCE73GzoPSlT",
    "UD3FiHSaPSlU",
    "f6NBLKUfPSlU",
    "kJKU6dVePSlU",
    "-TYHhj4ePSlV",
    "QjsoqNFyPSlV",
    "Y5LrG1Z-PSlV",
    "Fl0kyj1HPSlV",
    "Sr5COCNFPSlW",
    "qAyBoK8rPSlW",
    "iszHXWZnPSlW",
    "n9JybYIRPSlX",
    "g93HQKwBPSlX"
   ],
   "name": "MongoDB - Intro In Class (USC) SOLUTIONS.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
